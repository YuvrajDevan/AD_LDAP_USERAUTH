Front-End

Angular CLI: 12.2.18
Node: 12.22.1
Package Manager: npm 6.14.12

Configuration
1. auth.service.ts
   -Change the URL according to the RESTAPI(http://url:port/apiname)
   

Back-End 

1.Connection establishment
 -//Mindtech CRED
  env.put(Context.PROVIDER_URL, "ldap://172.16.5.3:389");
  env.put(Context.SECURITY_PRINCIPAL, "java.devtest@Mindteck.com");
  env.put(Context.SECURITY_CREDENTIALS, "mind@123");
  
2. Configure Identifying Attribute
   - String identifyingAttribute = "uid" based on our requirement

3. Authentication method
   -authEnv.put(Context.PROVIDER_URL, "ldap://172.16.5.3:389");



Jar Deploy in server, follow these steps:

1. Install Java: Spring Boot requires Java to run, so make sure you have Java installed on your Linux system. You can check if Java is installed by running the command: java -version.

2. Copy JAR file to server: Transfer the Spring Boot JAR file to your Linux server. You can use a tool such as scp or FTP to do this.

3. Set up environment variables: Set the JAVA_HOME environment variable to the location of the Java installation.

4. Start the application: Navigate to the directory where the JAR file is located and run the following command:

java -jar <your-jar-file>.jar

5. Monitor the application: You can use the Linux tail command to monitor the logs and ensure that the application has started correctly.

6. Optionally, set up as a service: To run the application as a service, you can use tools such as systemd or supervisord to ensure that the application starts automatically on reboot and can be easily managed.


To deploy an Angular build in a Linux server using the nohup command, follow these steps:

1. Copy the build to server: Copy the Angular build (the dist folder generated by running ng build) to the server. You can use a tool such as scp or FTP to do this.

2. Install Node.js: You need to have Node.js installed on the server to run Angular applications. You can install Node.js by following the instructions at the official Node.js website.

3. Install a web server: You will need to install a web server to serve the Angular build. You can use a simple web server such as http-server or serve. You can install http-server globally by running the following command:

npm install -g http-server

4. Start the web server: Navigate to the directory where the Angular build is located and run the following command:

 - nohup http-server dist &

5. Monitor the logs: You can monitor the logs of the web server using the tail command:

 tail -f nohup.out

6. Test the deployment: Visit http://<your-server-ip-address>:8080 in your web browser to ensure that the Angular application is properly deployed and accessible.

Note: The nohup command is used to run the web server in the background and keep it running even after you log out of the server. The & symbol at the end of the command is used to run the process in the background. The nohup.out file contains the output of the command.




